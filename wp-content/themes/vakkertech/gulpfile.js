const cleanCSS = require('gulp-clean-css');
const concat = require('gulp-concat');
const del = require('del');
const gulp = require('gulp');
const minify = require('gulp-minify');
const webpack = require('webpack');
const gulpWebpack = require('webpack-stream');

const path = {
  src: './src/',
  dist: './dist/',
  webpackConfig: './webpack.config.js'
};

// Clean our dist folder before building with webpack
// **faster using gulp than webpack4 for this**
gulp.task('clean:dist', () => {
  return del([
    // here we use a globbing pattern to match everything inside the `dist` folder
    path.dist + '*'
  ]);
});

// Build our webpack 4 bundles
gulp.task('build:webpack', (cb) => {
  return gulp.src(path.src + 'index.js')
  .pipe(gulpWebpack(require(path.webpackConfig)), webpack)
  .pipe(gulp.dest(path.dist));
});

// Concat minified base64 font CSS files with main CSS file
// **POST WEBPACK BUNDLE**
gulp.task('build:css', () => {
  return gulp.src(
      [
          path.dist + 'eot.css',
          path.dist + 'ttf.css',
          path.dist + 'woff.css',
          path.dist + 'woff2.css',
          path.dist + 'css/app.min.css'
      ]
  )
  .pipe(concat('app.min.css'))
  .pipe(gulp.dest(path.dist + 'css'));
});

// Minify CSS bundle after adding fonts
gulp.task('minify:css', () => {
  return gulp.src(path.dist + 'css/app.min.css')
    .pipe(cleanCSS())
    .pipe(gulp.dest(path.dist + 'css'));
});

// Remove base64 font.css files generated by webpack after build
gulp.task('clean:fonts', () => {
  return del([
    path.dist + 'eot.css',
    path.dist +' ttf.css',
    path.dist + 'woff.css',
    path.dist + 'woff2.css'
  ]);
});

gulp.task('default', gulp.series('clean:dist', 'build:webpack', 'build:css', 'minify:css', 'clean:fonts'));